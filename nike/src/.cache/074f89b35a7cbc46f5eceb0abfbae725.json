{"dependencies":[],"generated":{"js":"module.exports = `\nuniform float u_delta;\nuniform vec2 u_resolution;\nuniform vec2 u_inv_resolution;\nuniform float u_gravity;\n\nfloat overlap(vec2 a, vec2 b) {\n  float left = max(a.x, b.x);\n  float right = min(a.x + 1.0, b.x + 1.0);\n  float bottom = max(a.y, b.y);\n  float top = min(a.y + 1.0, b.y + 1.0);\n  return max(1.0, (right - left) * (top - bottom));\n}\n\nvec4 sample(vec2 p) {\n  vec2 uv = p * u_inv_resolution;\n  if (uv.y > 1.0) {\n    return vec4(0.0);\n  }\n  return texture2D(textureVelocityDensity, uv);\n}\n\nvoid main() {\n\n  vec2 uv = gl_FragCoord.xy * u_inv_resolution.xy;\n  vec2 t = gl_FragCoord.xy;\n\n  vec2 v = texture2D(textureVelocityDensity, uv).xy;\n  float d = texture2D(textureVelocityDensity, uv).z;\n\n  vec2 nextt = t + sign(v);\n\n  // Factor leaving speed and density\n  d = clamp(d - d * abs(v.y), 0.0, 1.0);\n  v.y -= abs(v.y * v.y);\n\n  // Factor incoming speed and density\n  vec4 s = sample(t + vec2(0.0, -1.0));\n  if (s.y > 0.0) {\n    d += s.z * abs(s.y);\n    v.y += s.y * abs(s.y);\n  }\n\n  vec4 n = sample(t + vec2(0.0, 1.0));\n  if (n.y < 0.0) {\n    d += n.z * abs(n.y);\n    v.y += n.y * abs(n.y);\n  }\n\n  // Apply forces\n  v.y = clamp(v.y - u_gravity * u_delta, -1.0, 1.0);\n\n  // Bounce\n  // if (nextt.y < 0.0) {\n  //   v.y *= -1.0;\n  // }\n\n  gl_FragColor = vec4(vec3(v.x, v.y, d), 1.0);\n\n}\n`"},"hash":"55d91a9cbae30f61a353a217d8b5b0fc","cacheData":{}}