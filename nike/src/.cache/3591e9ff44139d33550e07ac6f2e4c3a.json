{"dependencies":[],"generated":{"js":"module.exports = `#define POINTS_COUNT 0\nprecision mediump float;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nuniform vec2 u_points_position[ 20 ];\nuniform vec3 u_points_color[ 20 ];\n\nfloat distanceSq(vec2 p1, vec2 p2) {\n  vec2 d = p1 - p2;\n  return dot(d, d);\n}\n\nvoid main() {\n\n  vec2 st = gl_FragCoord.xy / u_resolution;\n\n  vec3 closest1;\n  vec3 closest2;\n  vec3 closest3;\n  vec3 distances = vec3(dot(u_resolution, u_resolution));\n\n  for (int i = 0; i < 20; i++) {\n    float d = distanceSq(st, u_points_position[i] / u_resolution);\n    if (d < distances.x) {\n      distances = vec3(d, distances.x, distances.y);\n      closest3 = closest2;\n      closest2 = closest1;\n      closest1 = u_points_color[i];\n    } else if (d < distances.y) {\n      distances = vec3(distances.x, d, distances.y);\n      closest3 = closest2;\n      closest2 = u_points_color[i];\n    } else if (d < distances.z) {\n      distances = vec3(distances.x, distances.y, d);\n      closest3 = u_points_color[i];\n    }\n  }\n\n  vec3 f = vec3(1.0) / distances;\n  float fsum = dot(f, vec3(1.0));\n  vec3 col = vec3(0.0);\n  col += closest1 * f.x;\n  col += closest2 * f.y;\n  col += closest3 * f.z;\n  col /= fsum;\n\n  gl_FragColor = vec4(col, 1.0);\n}\n`"},"hash":"889ffc52ec238c0d3e8ac27ac77a7251","cacheData":{}}